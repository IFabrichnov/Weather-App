{"version":3,"sources":["components/info.jsx","components/form.jsx","components/weatherInfo.jsx","App.js","serviceWorker.js","index.js"],"names":["Info","props","Form","onSubmit","weatherMethod","type","name","placeholder","WeatherInfo","className","city","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","setState","main","expand","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAWeA,EATF,SAACC,GACV,OACI,6BACI,2CACA,kECKGC,EATF,SAACD,GACV,OAAO,6BACH,0BAAME,SAAUF,EAAMG,eAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3C,4HCUGC,EAdK,SAACP,GAClB,OAAO,yBAAKQ,UAAU,aAChBR,EAAMS,MACP,6BACI,wCAAcT,EAAMS,KAApB,KAA4BT,EAAMU,SAClC,2CAAiBV,EAAMW,MACvB,wCAAcX,EAAMY,UACpB,sCAAYZ,EAAMa,SAGtB,uBAAGL,UAAU,SAASR,EAAMc,SCN9BC,EAAU,mCA4EDC,E,2MAzEXC,MAAQ,CACJN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,G,EAGXC,e,uCAAiB,WAAOC,GAAP,yBAAAC,EAAA,yDACbD,EAAEE,mBACIb,EAAOW,EAAEG,OAAOC,SAASf,KAAKgB,OAFvB,iCAMaC,MAAM,qDAAD,OAAsDjB,EAAtD,kBAAoEM,EAApE,kBANlB,cAMHY,EANG,gBAOUA,EAAQC,OAPlB,OAOHC,EAPG,OAUHhB,EAASgB,EAAKC,IAAIjB,QAClBkB,EAAO,IAAIC,MACZC,QAAQpB,GACPqB,EAAcH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAG3E,EAAKC,SAAS,CACV3B,KAAMkB,EAAKU,KAAK5B,KAChBF,KAAMoB,EAAKxB,KACXK,QAASmB,EAAKC,IAAIpB,QAClBE,SAAUiB,EAAKU,KAAK3B,SACpBC,OAAQqB,EACRpB,WAAOI,IAtBF,wBAyBT,EAAKoB,SAAS,CACV3B,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,+BA/BF,4C,8HAqCb,OACI,yBAAKN,UAAU,UAAUgC,OAAO,MAC5B,yBAAKhC,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,YACX,kBAAC,EAAD,CAAML,cAAesC,KAAKtB,iBAC1B,kBAAC,EAAD,CACIR,KAAM8B,KAAKxB,MAAMN,KACjBF,KAAMgC,KAAKxB,MAAMR,KACjBC,QAAS+B,KAAKxB,MAAMP,QACpBE,SAAU6B,KAAKxB,MAAML,SACrBC,OAAQ4B,KAAKxB,MAAMJ,OACnBC,MAAO2B,KAAKxB,MAAMH,iB,GA/DpC4B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.204d214f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Info = (props) => {\r\n    return (\r\n        <div>\r\n            <h2>Weather App</h2>\r\n            <p>find out the weather in your city</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Info;","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return <div>\r\n        <form onSubmit={props.weatherMethod}>\r\n            <input type=\"text\" name=\"city\" placeholder=\"Город\"/>\r\n            <button>Показать погоду</button>\r\n        </form>\r\n    </div>\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst WeatherInfo = (props) => {\r\n   return <div className=\"infoWeath\">\r\n        {props.city &&\r\n        <div>\r\n            <p>Location: {props.city}, {props.country}</p>\r\n            <p>Temperature: {props.temp}</p>\r\n            <p>Pressure: {props.pressure}</p>\r\n            <p>Sunset: {props.sunset}</p>\r\n        </div>\r\n        }\r\n        <p className=\"error\">{props.error}</p>\r\n    </div>\r\n}\r\n\r\nexport default WeatherInfo;","import React from 'react';\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport WeatherInfo from \"./components/weatherInfo\";\n\n\nconst API_KEY = \"c4ae7cad4b5bdf63566b821f63b82829\";\n\nclass App extends React.Component {\n    state = {\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        sunset: undefined,\n        error: undefined\n    }\n\n    gettingWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n\n        // делаем проверку, если в поле для ввода задан город, то выполняем операцию по выводу температуры\n        if (city) {\n            const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n            const data = await api_url.json();\n\n            //меняем секунды во время\n            const sunset = data.sys.sunset;\n            const date = new Date();\n            date.setTime(sunset);\n            const sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n            //перезаписываем данные state на данные, полученные с api_url\n            this.setState({\n                temp: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                pressure: data.main.pressure,\n                sunset: sunset_date,\n                error: undefined\n            });\n        } else {\n            this.setState({\n                temp: undefined,\n                city: undefined,\n                country: undefined,\n                pressure: undefined,\n                sunset: undefined,\n                error: \"Enter the name of the city\"\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"wrapper\" expand=\"md\">\n                <div className=\"main\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col info\">\n                                <Info/>\n                            </div>\n                            <div className=\"col form\">\n                                <Form weatherMethod={this.gettingWeather}/>\n                                <WeatherInfo\n                                    temp={this.state.temp}\n                                    city={this.state.city}\n                                    country={this.state.country}\n                                    pressure={this.state.pressure}\n                                    sunset={this.state.sunset}\n                                    error={this.state.error}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//подключаем bootstrap\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport  './App.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}